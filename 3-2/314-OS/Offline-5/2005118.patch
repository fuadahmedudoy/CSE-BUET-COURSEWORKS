diff --git a/Makefile b/Makefile
index 62fd0f8..0da83ea 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..c4b60d9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,10 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            acquire_memlock(int mem_id);
+void            free_thread_pagetable(pagetable_t pagetable, uint64 sz);
+void            release_memlock(int mem_id);
+
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,6 +169,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64,uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
@@ -173,6 +178,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            uvmfree_thread(pagetable_t,uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..40f9c50 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -53,6 +53,7 @@ procinit(void)
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&p->memlock,"mem");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -123,6 +124,7 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  p->mem_id=p->pid;
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -158,8 +160,16 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  acquire_memlock(p->mem_id);
+  if(p->pagetable&&p->is_thread!=1)
     proc_freepagetable(p->pagetable, p->sz);
+  else if(p->pagetable&&p->is_thread==1)
+  {
+    
+    free_thread_pagetable(p->pagetable,p->sz);
+    
+  }
+  release_memlock(p->mem_id);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -170,6 +180,146 @@ freeproc(struct proc *p)
   p->xstate = 0;
   p->state = UNUSED;
 }
+void
+acquire_memlock(int mid){
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p->mem_id == mid) {
+      acquire(&p->memlock);
+    }
+  }
+}
+void
+release_memlock(int mid){
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p->mem_id == mid) {
+      release(&p->memlock);
+    }
+  }
+}
+
+
+
+uint64
+sys_thread_create(void)        //edited
+{
+
+  uint64 fcn;
+  argaddr(0, &fcn);
+
+  uint64 argu;
+  argaddr(1, &argu);
+
+  uint64 stck;
+  argaddr(2, &stck);
+
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  acquire_memlock(p->mem_id);
+  if(uvmmirror(p->pagetable, np->pagetable,0, p->sz) < 0){
+    release_memlock(p->mem_id);
+
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  release_memlock(p->mem_id);
+  np->mem_id=p->mem_id;
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 = 0;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  
+  np->trapframe->sp=stck+PGSIZE;
+  np->trapframe->epc=fcn;
+  np->trapframe->a0=argu;
+  np->trapframe->ra=0xffffffff;
+  np->is_thread=1;
+  release(&np->lock);
+  return pid;
+}
+
+
+uint64
+sys_thread_join(void)
+{
+  int thrdid;
+  argint(0, &thrdid);
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p && pp->mem_id==p->mem_id){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE&&pp->is_thread==1&&pp->pid==thrdid){
+          // Found one.
+          pid = pp->pid;
+          // if(acopyout(p->pagetable, addr, (char *)&pp->xstate,
+          //                         sizeof(pp->xstate)) < 0) {
+          //   release(&pp->lock);
+          //   release(&wait_lock);
+          //   return -1;
+          // }
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+
+}
 
 // Create a user page table for a given process, with no user memory,
 // but with trampoline and trapframe pages.
@@ -214,7 +364,13 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
   uvmfree(pagetable, sz);
 }
-
+void 
+free_thread_pagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmfree_thread(pagetable, sz);
+}
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -260,17 +416,34 @@ int
 growproc(int n)
 {
   uint64 sz;
-  struct proc *p = myproc();
+  struct proc *p = myproc(),*cp;
+
+  acquire_memlock(p->mem_id);
 
   sz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release_memlock(p->mem_id);
       return -1;
     }
+    for(cp=proc;cp<&proc[NPROC];cp++){
+      if(cp->mem_id==p->mem_id&&cp->pid!=p->pid){
+        uvmmirror(p->pagetable,cp->pagetable,cp->sz,p->sz);
+        cp->sz=p->sz;
+      }
+    }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    
+    for(cp=proc;cp<&proc[NPROC];cp++){
+      if(cp->mem_id==p->mem_id){
+        uvmunmap(cp->pagetable,PGROUNDDOWN(p->sz),((PGROUNDUP(cp->sz)-PGROUNDUP(p->sz))/PGSIZE),0);
+        cp->sz=p->sz;
+      }
+    }
   }
   p->sz = sz;
+  release_memlock(p->mem_id);
   return 0;
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..6fdb965 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -84,6 +84,9 @@ enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 // Per-process state
 struct proc {
   struct spinlock lock;
+  struct spinlock memlock;
+  int is_thread;
+  int mem_id;
 
   // p->lock must be held when using these:
   enum procstate state;        // Process state
@@ -92,6 +95,7 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
+
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6a81db3 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_join]   sys_thread_join,
+[SYS_thread_exit]   sys_thread_exit,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..010e4b9 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join   23
+#define SYS_thread_exit   24
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..cd65705 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,8 @@
 #include "spinlock.h"
 #include "proc.h"
 
+
+
 uint64
 sys_exit(void)
 {
@@ -91,3 +93,12 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+
+uint64
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..1092c82 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -302,7 +302,13 @@ uvmfree(pagetable_t pagetable, uint64 sz)
     uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
   freewalk(pagetable);
 }
-
+void
+uvmfree_thread(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -339,6 +345,35 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+
+
+
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 oldsz,uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  oldsz=PGROUNDUP(oldsz);
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      //kfree(pa);//check this
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..f1214fd
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,124 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct thread_spinlock{
+    uint locked;
+};
+
+void thread_spin_init(struct thread_spinlock *lk){
+    lk->locked=0;
+}
+
+void thread_spin_lock(struct thread_spinlock *lk){
+    while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+    __sync_synchronize();
+}
+
+void thread_spin_unlock(struct thread_spinlock *lk){
+    __sync_synchronize();
+    __sync_lock_release(&lk->locked);
+}
+
+
+struct thread_mutex_lock{
+    uint locked;
+};
+
+void thread_mutex_init(struct thread_mutex_lock *lk){
+    lk->locked=0;
+}
+
+void thread_mutex_lock(struct thread_mutex_lock *lk){
+    while(__sync_lock_test_and_set(&lk->locked, 1) != 0){
+        sleep(1);
+    }
+    __sync_synchronize();
+}
+
+void thread_mutex_unlock(struct thread_mutex_lock *lk){
+    __sync_synchronize();
+    __sync_lock_release(&lk->locked);
+}
+
+
+struct thread_spinlock lock;
+struct thread_mutex_lock mlock;
+struct thread_spinlock printlock;
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+    thread_spin_lock(&printlock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_spin_unlock(&printlock);
+    
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+        
+        
+         //thread_spin_lock(&lock);
+         //thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	     if(old != total_balance) {
+                // thread_spin_lock(&printlock);
+                // printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+                // thread_spin_unlock(&printlock);
+
+         }
+         total_balance = old + 1;
+         //thread_mutex_unlock(&mlock);
+         //thread_spin_unlock(&lock);
+
+    }
+  
+    printf( "Done s:%s\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+  thread_spin_init(&lock);
+  thread_mutex_init(&mlock);
+  thread_spin_init(&printlock);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..00e51dd 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,7 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..a334aa7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
