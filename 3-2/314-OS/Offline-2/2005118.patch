diff --git a/.dir-locals.el b/.dir-locals.el
old mode 100644
new mode 100755
diff --git a/.editorconfig b/.editorconfig
old mode 100644
new mode 100755
diff --git a/.gdbinit.tmpl-riscv b/.gdbinit.tmpl-riscv
old mode 100644
new mode 100755
diff --git a/.gitignore b/.gitignore
old mode 100644
new mode 100755
diff --git a/LICENSE b/LICENSE
old mode 100644
new mode 100755
diff --git a/Makefile b/Makefile
old mode 100644
new mode 100755
index 62fd0f8..c4dae69
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_load\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/README b/README
old mode 100644
new mode 100755
diff --git a/kernel/bio.c b/kernel/bio.c
old mode 100644
new mode 100755
diff --git a/kernel/buf.h b/kernel/buf.h
old mode 100644
new mode 100755
diff --git a/kernel/console.c b/kernel/console.c
old mode 100644
new mode 100755
diff --git a/kernel/defs.h b/kernel/defs.h
old mode 100644
new mode 100755
diff --git a/kernel/elf.h b/kernel/elf.h
old mode 100644
new mode 100755
diff --git a/kernel/entry.S b/kernel/entry.S
old mode 100644
new mode 100755
diff --git a/kernel/exec.c b/kernel/exec.c
old mode 100644
new mode 100755
diff --git a/kernel/fcntl.h b/kernel/fcntl.h
old mode 100644
new mode 100755
diff --git a/kernel/file.c b/kernel/file.c
old mode 100644
new mode 100755
diff --git a/kernel/file.h b/kernel/file.h
old mode 100644
new mode 100755
diff --git a/kernel/fs.c b/kernel/fs.c
old mode 100644
new mode 100755
diff --git a/kernel/fs.h b/kernel/fs.h
old mode 100644
new mode 100755
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
old mode 100644
new mode 100755
diff --git a/kernel/kernel.ld b/kernel/kernel.ld
old mode 100644
new mode 100755
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
old mode 100644
new mode 100755
diff --git a/kernel/log.c b/kernel/log.c
old mode 100644
new mode 100755
diff --git a/kernel/main.c b/kernel/main.c
old mode 100644
new mode 100755
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
old mode 100644
new mode 100755
diff --git a/kernel/param.h b/kernel/param.h
old mode 100644
new mode 100755
diff --git a/kernel/pipe.c b/kernel/pipe.c
old mode 100644
new mode 100755
diff --git a/kernel/plic.c b/kernel/plic.c
old mode 100644
new mode 100755
diff --git a/kernel/printf.c b/kernel/printf.c
old mode 100644
new mode 100755
diff --git a/kernel/proc.c b/kernel/proc.c
old mode 100644
new mode 100755
index 58a8a0b..1ce8729
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -26,6 +26,8 @@ extern char trampoline[]; // trampoline.S
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+struct spinlock cmdlock;
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -51,6 +53,7 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&cmdlock, "cmdlock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
diff --git a/kernel/proc.h b/kernel/proc.h
old mode 100644
new mode 100755
index d021857..fe22f94
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int rid;
 };
diff --git a/kernel/ramdisk.c b/kernel/ramdisk.c
old mode 100644
new mode 100755
diff --git a/kernel/riscv.h b/kernel/riscv.h
old mode 100644
new mode 100755
diff --git a/kernel/sleeplock.c b/kernel/sleeplock.c
old mode 100644
new mode 100755
diff --git a/kernel/sleeplock.h b/kernel/sleeplock.h
old mode 100644
new mode 100755
diff --git a/kernel/spinlock.c b/kernel/spinlock.c
old mode 100644
new mode 100755
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
old mode 100644
new mode 100755
diff --git a/kernel/start.c b/kernel/start.c
old mode 100644
new mode 100755
diff --git a/kernel/stat.h b/kernel/stat.h
old mode 100644
new mode 100755
diff --git a/kernel/string.c b/kernel/string.c
old mode 100644
new mode 100755
diff --git a/kernel/swtch.S b/kernel/swtch.S
old mode 100644
new mode 100755
diff --git a/kernel/syscall.c b/kernel/syscall.c
old mode 100644
new mode 100755
index ed65409..a6ebd56
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_info(void);
+extern uint64 sys_setcmd(void);
+extern uint64 sys_getCmd(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,22 +130,241 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_info]    sys_info,
+[SYS_setcmd]  sys_setcmd,
+[SYS_getCmd]  sys_getCmd,
 };
 
+char *syscall_names[] = {
+    [SYS_fork] = "fork",
+    [SYS_exit] = "exit",
+    [SYS_wait] = "wait",
+    [SYS_pipe] = "pipe",
+    [SYS_read] = "read",
+    [SYS_kill] = "kill",
+    [SYS_exec] = "exec",
+    [SYS_fstat] = "fstat",
+    [SYS_chdir] = "chdir",
+    [SYS_dup] = "dup",
+    [SYS_getpid] = "getpid",
+    [SYS_sbrk] = "sbrk",
+    [SYS_sleep] = "sleep",
+    [SYS_uptime] = "uptime",
+    [SYS_open] = "open",
+    [SYS_write] = "write",
+    [SYS_mknod] = "mknod",
+    [SYS_unlink] = "unlink",
+    [SYS_link] = "link",
+    [SYS_mkdir] = "mkdir",
+    [SYS_close] = "close"
+};
+
+int fd=0, n=0;
+char name[128]=" ",name2[128]=" ";
+uint64 addrs=0;
+
+void 
+trace_argPrint(int num,struct proc *p) {
+      // Buffer for strings
+    //printf("args: (");
+    switch (num)
+    {
+        // No arguments (e.g., fork, getpid, uptime)
+        case SYS_fork:
+        case SYS_getpid:
+        case SYS_uptime:
+            //printf("void");
+            break;
+
+        // System calls with a single integer argument (exit, dup, kill, sleep, trace)
+        case SYS_exit:
+        case SYS_dup:
+        case SYS_kill:
+        case SYS_sleep:
+        case SYS_close:
+            argint(0, &n);  // Single integer argument
+            //printf("%d", n);
+            break;
+
+        // System calls that take a pointer to an integer (wait, pipe)
+        case SYS_wait:
+        case SYS_pipe:
+            argaddr(0, &addrs);  // Address pointer
+            //printf("%p", (void*)addr);
+            break;
+
+        // System calls with (int fd, void *buf, int n) like read and write
+        case SYS_read:
+        case SYS_write:
+            argint(0, &fd);    // File descriptor
+            argaddr(1, &addrs); // Buffer address
+            argint(2, &n);     // Number of bytes
+            //printf("%d, %p, %d", fd, (void*)addr, n);
+            break;
+
+
+        // Exec takes a path and an argument array
+        case SYS_exec:
+            argstr(0,name, sizeof(name));  // Command path
+            argaddr(1, &addrs);            // Argument array
+            //printf("%s, %p", name, (void*)addr);
+            break;
+
+        // Open takes a path and flags
+        case SYS_open:
+            argstr(0, name, sizeof(name));  // Path
+            argint(1, &n);                // Flags
+            //printf("%s, %d", name, n);
+            break;
+
+        // Mknod takes a path and two short values (major, minor)
+        case SYS_mknod:
+            argstr(0, name, sizeof(name));  // Path
+            argint(1, &n);                // Major
+            argint(2, &fd);               // Minor
+            //printf("%s, %d, %d", name, n, fd);
+            break;
+
+        // Grouping unlink, mkdir, and chdir (all take a path argument)
+        case SYS_unlink:
+        case SYS_mkdir:
+        case SYS_chdir:
+            argstr(0, name, sizeof(name));  // Path
+            //printf("%s", name);
+            break;
+
+        // Fstat takes a file descriptor and a pointer to a stat structure
+        case SYS_fstat:
+            argint(0, &fd);               // File descriptor
+            argaddr(1, &addrs);            // Pointer to struct stat
+            //printf("%d, %p", fd, (void*)addr);
+            break;
+
+        // Link takes two paths (old and new)
+        case SYS_link:
+            argstr(0, name, sizeof(name));  // Old path
+            argstr(1, name2, sizeof(name2));  // New path
+            //printf("old: %s, new: %s", name, name2);
+            break;
+
+        default:
+            //printf("Unknown system call");
+            break;
+    }
+    //printf("), ");
+}
+
+
+void
+printArg(int num) {
+      // Buffer for strings
+    
+    printf("args: (");
+    switch (num)
+    {
+        // No arguments (e.g., fork, getpid, uptime)
+        case SYS_fork:
+        case SYS_getpid:
+        case SYS_uptime:
+            printf("void");
+            break;
+
+        // System calls with a single integer argument (exit, dup, kill, sleep, trace)
+        case SYS_exit:
+        case SYS_dup:
+        case SYS_kill:
+        case SYS_sleep:
+        case SYS_close:
+            printf("%d", n);
+            break;
+
+        // System calls that take a pointer to an integer (wait, pipe)
+        case SYS_wait:
+        case SYS_pipe:
+            printf("%p", (void*)addrs);
+            break;
+
+        // System calls with (int fd, void *buf, int n) like read and write
+        case SYS_read:
+        case SYS_write:
+            printf("%d, %p, %d", fd, (void*)addrs, n);
+            break;
+
+
+        // Exec takes a path and an argument array
+        case SYS_exec:
+
+            printf("%s, %p", name, (void*)addrs);
+            break;
+
+        // Open takes a path and flags
+        case SYS_open:
+            printf("%s, %d", name, n);
+            break;
+
+        // Mknod takes a path and two short values (major, minor)
+        case SYS_mknod:
+            printf("%s, %d, %d", name, n, fd);
+            break;
+
+        // Grouping unlink, mkdir, and chdir (all take a path argument)
+        case SYS_unlink:
+        case SYS_mkdir:
+        case SYS_chdir:
+            printf("%s", name);
+            break;
+
+        // Fstat takes a file descriptor and a pointer to a stat structure
+        case SYS_fstat:
+            printf("%d, %p", fd, (void*)addrs);
+            break;
+
+        // Link takes two paths (old and new)
+        case SYS_link:
+            printf("old: %s, new: %s", name, name2);
+            break;
+
+        default:
+            printf("Unknown system call");
+            break;
+    }
+    printf("), ");
+}
+
+
+
+
 void
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
-
   num = p->trapframe->a7;
+  if(num==p->rid){
+    
+    trace_argPrint(num,p);
+  }
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+    
+    if(num==p->rid && num==2){
+      printf("pid: %d, syscall: %s, ",p->pid,syscall_names[num]);
+      printArg(num);
+      printf("return: %d\n",0);
+    }
     p->trapframe->a0 = syscalls[num]();
+    if(num==p->rid){
+      printf("pid: %d, syscall: %s, ",p->pid,syscall_names[num]);
+      printArg(num);
+      printf("return: %lu\n",p->trapframe->a0);
+      //p->rid=100;
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
+  
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
old mode 100644
new mode 100755
index bc5f356..8c927ef
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,10 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_info   23
+#define SYS_setcmd 24
+#define SYS_getCmd 25
+
+ 
+
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
old mode 100644
new mode 100755
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
old mode 100644
new mode 100755
index 3b4d5bd..d1570f7
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,11 +6,24 @@
 #include "spinlock.h"
 #include "proc.h"
 
+extern struct proc proc[NPROC]; 
+extern struct spinlock cmdlock;
+struct procInfo {
+    int activeProcess; 
+    int totalProcess; 
+    int memsize; 
+    int totalMemSize; 
+};
+const int MAXCMD=50;
+int cnt=0;
+char buf[50][100];
+
 uint64
 sys_exit(void)
 {
   int n;
   argint(0, &n);
+  myproc()->rid=100;
   exit(n);
   return 0;  // not reached
 }
@@ -76,6 +89,7 @@ sys_kill(void)
   int pid;
 
   argint(0, &pid);
+  myproc()->rid=100;
   return kill(pid);
 }
 
@@ -91,3 +105,69 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void){
+  int i;
+  argint(0,&i);
+  struct proc *p=myproc();
+  p->rid=i;
+  return 0;
+}
+
+uint64
+sys_info(void){
+  uint64 addr;
+  struct procInfo recieved;
+  argaddr(0,&addr);
+  copyin(myproc()->pagetable,(char *)&recieved,addr,sizeof(struct procInfo));
+  struct proc temp;
+  int processCount=0;
+  int size=0;
+  for(int i=0;i<NPROC;i++){
+    temp=proc[i];
+    //acquire(&temp.lock);
+    if(temp.state==RUNNABLE||temp.state==RUNNING||temp.state==SLEEPING){
+      processCount++;
+      size+=temp.sz;
+    }
+    //release(&temp.lock);
+  }
+  recieved.totalProcess=NPROC;
+  recieved.activeProcess=processCount;
+  recieved.memsize=size;
+  recieved.totalMemSize=PHYSTOP-KERNBASE;
+  copyout(myproc()->pagetable,addr,(char*)&recieved,sizeof(struct procInfo));
+  return 0;
+}
+
+uint64
+sys_setcmd(void){
+  uint64 addr;
+  acquire(&cmdlock);
+  argaddr(0,&addr);
+  copyin(myproc()->pagetable,(char *)buf[cnt],addr,sizeof(buf));
+  cnt++;
+  if(cnt>=7){
+    for(int i=0;i<6;i++){
+      strncpy(buf[i],buf[i+1],100);
+    }
+    cnt--;
+  }
+   release(&cmdlock);
+  return 0;
+}
+
+uint64
+sys_getCmd(void){
+  uint64 addr;
+  argaddr(0,&addr);
+  int i;
+  argint(1,&i);
+  if(i>cnt){
+    return -1;
+  }
+  copyout(myproc()->pagetable,addr,(char*)buf[cnt-i],sizeof(buf[0]));
+  return 0;
+}
+
diff --git a/kernel/trampoline.S b/kernel/trampoline.S
old mode 100644
new mode 100755
diff --git a/kernel/trap.c b/kernel/trap.c
old mode 100644
new mode 100755
diff --git a/kernel/types.h b/kernel/types.h
old mode 100644
new mode 100755
diff --git a/kernel/uart.c b/kernel/uart.c
old mode 100644
new mode 100755
diff --git a/kernel/virtio.h b/kernel/virtio.h
old mode 100644
new mode 100755
diff --git a/kernel/virtio_disk.c b/kernel/virtio_disk.c
old mode 100644
new mode 100755
diff --git a/kernel/vm.c b/kernel/vm.c
old mode 100644
new mode 100755
diff --git a/mkfs/mkfs.c b/mkfs/mkfs.c
old mode 100644
new mode 100755
diff --git a/user/cat.c b/user/cat.c
old mode 100644
new mode 100755
diff --git a/user/echo.c b/user/echo.c
old mode 100644
new mode 100755
diff --git a/user/forktest.c b/user/forktest.c
old mode 100644
new mode 100755
diff --git a/user/grep.c b/user/grep.c
old mode 100644
new mode 100755
diff --git a/user/grind.c b/user/grind.c
old mode 100644
new mode 100755
diff --git a/user/init.c b/user/init.c
old mode 100644
new mode 100755
diff --git a/user/initcode.S b/user/initcode.S
old mode 100644
new mode 100755
diff --git a/user/kill.c b/user/kill.c
old mode 100644
new mode 100755
diff --git a/user/ln.c b/user/ln.c
old mode 100644
new mode 100755
diff --git a/user/load.c b/user/load.c
new file mode 100755
index 0000000..dbe2f35
--- /dev/null
+++ b/user/load.c
@@ -0,0 +1,136 @@
+#include "kernel/types.h"
+#include "user.h"
+
+struct procInfo {
+    int activeProcess; 
+    int totalProcess; 
+    int memsize; 
+    int totalMemSize; 
+};
+
+// int main(int argc, char *argv[])
+// {
+//     struct procInfo pp;
+
+//         if (argc != 3) {
+//         printf("Usage: load <childCount> <allocationAmount>\n");
+//         exit(1);
+//     }
+
+//     int childCount = atoi(argv[1]);
+//     int allocationAmount = atoi(argv[2]);
+    
+//     if (childCount <= 0 || allocationAmount <= 0) {
+//         printf("Invalid arguments: childCount and allocationAmount must be positive integers.\n");
+//         exit(1);
+//     }
+
+//     printf("Starting program with %d children and %d bytes allocation per child.\n", childCount, allocationAmount);
+
+//     for (int i = 0; i < childCount; i++) {
+        
+//         int pid = fork();
+        
+//         if (pid < 0) {
+//             printf("Fork failed for child %d\n", i);
+//             exit(1);
+//         } else if (pid == 0) {
+//             int x=20;
+//             wait(&x);
+//             // Child process: allocate memory and sleep
+//             void* mem = malloc(allocationAmount);
+//             if (mem == 0) {
+//                 printf("Child %d: Memory allocation failed\n", i);
+//                 exit(1);
+//             }
+            
+//             printf("Child %d: Allocated %d bytes and going to sleep.\n", i, allocationAmount);
+//             sleep(1000);  // Sleep for a large chunk of time
+//             x=10;
+//             wait(&x);
+//             free(mem);  // Free memory before exiting
+//             printf("Child %d: Waking up and exiting.\n", i);
+//             exit(0);
+//         }
+//     }
+
+//     printf("Parent: Waiting for all children to finish.\n");
+//     sleep(500);
+
+//     info(&pp);
+    
+//     printf("System Info:\n");
+//     printf("Active Processes: %d\n", pp.activeProcess);
+//     printf("Total Processes: %d\n", pp.totalProcess);
+//     printf("Memory Used by Active Processes: %d KB\n", pp.memsize);
+//     printf("Total Memory Available: %d MB\n", pp.totalMemSize);
+
+// }
+
+
+
+
+
+
+
+// // load.c
+// #include "types.h"
+// #include "stat.h"
+// #include "user.h"
+// #include "syscall.h"
+
+int main(int argc, char *argv[]) {
+    if (argc != 3) {
+        printf("Usage: %s childCount allocationAmount\n", argv[0]);
+        exit(1);
+    }
+
+    int childCount = atoi(argv[1]);
+    int allocationAmount = atoi(argv[2]);
+    printf("Parent going to sleep\n");
+    for (int i = 0; i < childCount; i++) {    
+        int pid = fork();
+        sleep(10);
+        if (pid == 0) { // Child process
+            void *ptr = malloc(allocationAmount);
+            
+            printf("Child is created.\n");
+            printf("Child allocated %d byte.\n",allocationAmount);
+            printf("Child going to sleep.\n");
+ 
+            // Sleep for a long time
+            sleep(500);
+            free(ptr);
+            exit(0);
+        }
+    }
+
+
+    
+    sleep(10);
+    struct procInfo *pinfo = (struct procInfo*) malloc(sizeof(struct procInfo));
+    //struct procInfo pinfo;
+    printf("Parent wake up\n");
+    info(pinfo);
+    
+    int x=pinfo->memsize/(1024*1024);
+    int rem=pinfo->memsize%(1024*1024);
+    char remainders[4];
+    for(int i=0;i<4;i++){
+        rem*=10;
+        int q=rem/(1024*1024);
+        if(q==0){
+            remainders[i]='0';
+        }
+        else{
+            remainders[i]='0'+q;
+            rem=rem%(1024*1024);
+        }
+    }
+
+    printf("Processes: %d/%d\n", pinfo->activeProcess,pinfo->totalProcess);
+    printf("Ram %d.%s/%d (in MB) \n", x,remainders,(pinfo->totalMemSize/(1024*1024)));
+    
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/ls.c b/user/ls.c
old mode 100644
new mode 100755
diff --git a/user/mkdir.c b/user/mkdir.c
old mode 100644
new mode 100755
diff --git a/user/printf.c b/user/printf.c
old mode 100644
new mode 100755
diff --git a/user/rm.c b/user/rm.c
old mode 100644
new mode 100755
diff --git a/user/sh.c b/user/sh.c
old mode 100644
new mode 100755
index 836ebcb..7d24a31
--- a/user/sh.c
+++ b/user/sh.c
@@ -142,6 +142,22 @@ getcmd(char *buf, int nbuf)
   return 0;
 }
 
+void removeSpaces(char *str) {
+    int i = 0, j = 0;
+
+    // Loop through each character in the string
+    while (str[i]) {
+        // If the character is not a space, copy it to the new position
+        if (str[i] != ' ' && str[i] != '\t' && str[i] != '\n') {
+            str[j++] = str[i];
+        }
+        i++;
+    }
+
+    // Null-terminate the result string
+    str[j] = '\0';
+}
+
 int
 main(void)
 {
@@ -158,6 +174,7 @@ main(void)
 
   // Read and run input commands.
   while(getcmd(buf, sizeof(buf)) >= 0){
+    //printf("%s",buf);
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
       // Chdir must be called by the parent, not the child.
       buf[strlen(buf)-1] = 0;  // chop \n
@@ -165,10 +182,24 @@ main(void)
         fprintf(2, "cannot cd %s\n", buf+3);
       continue;
     }
+    else if(buf[0] == '!' && buf[1] == '!'){
+        removeSpaces(buf);
+        if(strlen(buf)>=3){
+          int x= getCmd(buf,buf[2]-'0');
+          if(x==-1){
+            printf("Invalid command\n");
+            exit(0);
+          }
+        }
+        else getCmd(buf,1);
+        printf("%s",buf);
+    }
+    setcmd(buf);
     if(fork1() == 0)
       runcmd(parsecmd(buf));
     wait(0);
   }
+  
   exit(0);
 }
 
diff --git a/user/stressfs.c b/user/stressfs.c
old mode 100644
new mode 100755
diff --git a/user/trace.c b/user/trace.c
new file mode 100755
index 0000000..21f2805
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/ulib.c b/user/ulib.c
old mode 100644
new mode 100755
diff --git a/user/umalloc.c b/user/umalloc.c
old mode 100644
new mode 100755
diff --git a/user/user.h b/user/user.h
old mode 100644
new mode 100755
index 04013ca..b198b62
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,5 @@
 struct stat;
-
+struct procInfo;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,6 +22,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int info(struct procInfo*);
+int setcmd(char *buff);
+int getCmd(char *buff,int n);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/user.ld b/user/user.ld
old mode 100644
new mode 100755
diff --git a/user/usertests.c b/user/usertests.c
old mode 100644
new mode 100755
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..a4daf22 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("info");
+entry("setcmd");
+entry("getCmd");
\ No newline at end of file
diff --git a/user/wc.c b/user/wc.c
old mode 100644
new mode 100755
diff --git a/user/zombie.c b/user/zombie.c
old mode 100644
new mode 100755
